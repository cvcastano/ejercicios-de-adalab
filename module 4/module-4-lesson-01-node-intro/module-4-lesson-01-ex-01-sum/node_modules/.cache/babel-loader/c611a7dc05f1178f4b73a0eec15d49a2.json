{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/CVCAS/OneDrive/Desktop/ADALAB/ejercicios-de-adalab/module 3/module-3-lesson-10-components-lifecycle/module-3-lesson-10-ex-02-commented-counter/src/components/Counter.js\";\nimport React from 'react';\nimport '../stylesheets/index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('ComponentDidMount method is being executed'); // guardamos el identificador del interval para limpiarlo en componentWillUnmount\n\n    this.intervalId = setInterval(this.incrementCounter, 1000); // NOTA: guardamos el identificador en un atributo de la clase y\n    // no en el estado ya que no queremos pintar el identificador en el DOM\n  }\n\n  componentWillUnmount() {\n    console.log('ComponentWillMount method is being executed'); // limpiamos el interval\n\n    clearInterval(this.intervalId);\n  }\n\n  incrementCounter() {\n    console.log('IncrementCounter method is being executed');\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter + 1\n      };\n    });\n  }\n\n  render() {\n    console.log('Render method is being executed');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Contador: \", this.state.counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/mnt/c/Users/CVCAS/OneDrive/Desktop/ADALAB/ejercicios-de-adalab/module 3/module-3-lesson-10-components-lifecycle/module-3-lesson-10-ex-02-commented-counter/src/components/Counter.js"],"names":["React","Counter","Component","constructor","props","state","counter","incrementCounter","bind","componentDidMount","console","log","intervalId","setInterval","componentWillUnmount","clearInterval","setState","prevState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,2BAAP;;;AAGA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EADkB,CAElB;;AACA,SAAKC,UAAL,GAAkBC,WAAW,CAAC,KAAKN,gBAAN,EAAwB,IAAxB,CAA7B,CAHkB,CAIlB;AACA;AACD;;AACDO,EAAAA,oBAAoB,GAAG;AACrBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EADqB,CAErB;;AACAI,IAAAA,aAAa,CAAC,KAAKH,UAAN,CAAb;AACD;;AACDL,EAAAA,gBAAgB,GAAG;AACjBG,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACA,SAAKK,QAAL,CAAcC,SAAS,IAAI;AACzB,aAAO;AAAEX,QAAAA,OAAO,EAAEW,SAAS,CAACX,OAAV,GAAoB;AAA/B,OAAP;AACD,KAFD;AAGD;;AACDY,EAAAA,MAAM,GAAG;AACPR,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,wBAAO;AAAA,+BAAgB,KAAKN,KAAL,CAAWC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA7BqC;;AAgCtC,eAAeL,OAAf","sourcesContent":["import React from 'react';\r\nimport '../stylesheets/index.scss';\r\n\r\n\r\nclass Counter extends React.Component {\r\nconstructor(props) {\r\n  super(props);\r\n  this.state = {\r\n    counter: 0\r\n  };\r\n  this.incrementCounter = this.incrementCounter.bind(this);\r\n}\r\ncomponentDidMount() {\r\n  console.log('ComponentDidMount method is being executed');\r\n  // guardamos el identificador del interval para limpiarlo en componentWillUnmount\r\n  this.intervalId = setInterval(this.incrementCounter, 1000);\r\n  // NOTA: guardamos el identificador en un atributo de la clase y\r\n  // no en el estado ya que no queremos pintar el identificador en el DOM\r\n}\r\ncomponentWillUnmount() {\r\n  console.log('ComponentWillMount method is being executed');\r\n  // limpiamos el interval\r\n  clearInterval(this.intervalId);\r\n}\r\nincrementCounter() {\r\n  console.log('IncrementCounter method is being executed');\r\n  this.setState(prevState => {\r\n    return { counter: prevState.counter + 1 };\r\n  });\r\n}\r\nrender() {\r\n  console.log('Render method is being executed');\r\n  return <div>Contador: {this.state.counter}</div>;\r\n}\r\n}\r\n\r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}