{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/CVCAS/OneDrive/Desktop/ADALAB/ejercicios-de-adalab/module 3/module-3-lesson-10-components-lifecycle/module-3-lesson-10-ex-04-commented-functional-counter/src/components/Counter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../stylesheets/index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  console.log('I am rendering'); // usamos el hook useState para crear counter en el estado del componente\n\n  const [counter, setCounter] = useState(0); // usamos el hook useEffect para gestionar los ciclos de vida del componente\n\n  useEffect(() => {\n    console.log('I am rendering'); // las 3 siguientes líneas se ejecutan al montar y renderizar el componente\n\n    let intervalId = setInterval(() => {\n      setCounter(counter + 1);\n    }, 1000); // la función retornada a continuación se ejecuta al desmontar y renderizar el componente\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Counter: \", counter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Counter, \"uPkTgB8PBsujXy6a5mXWSxFNaD8=\");\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/mnt/c/Users/CVCAS/OneDrive/Desktop/ADALAB/ejercicios-de-adalab/module 3/module-3-lesson-10-components-lifecycle/module-3-lesson-10-ex-04-commented-functional-counter/src/components/Counter.js"],"names":["React","useState","useEffect","Counter","console","log","counter","setCounter","intervalId","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,2BAAP;;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADoB,CAEpB;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC,CAHoB,CAIpB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADc,CAEd;;AACA,QAAIG,UAAU,GAAGC,WAAW,CAAC,MAAM;AACjCF,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,KAF2B,EAEzB,IAFyB,CAA5B,CAHc,CAMd;;AACA,WAAO,MAAM;AACXI,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GAVQ,CAAT;AAWA,sBAAO;AAAA,4BAAeF,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;GAAMH,O;;KAAAA,O;AAmBN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../stylesheets/index.scss';\r\n\r\n\r\nconst Counter = () => {\r\n  console.log('I am rendering');\r\n  // usamos el hook useState para crear counter en el estado del componente\r\n  const [counter, setCounter] = useState(0);\r\n  // usamos el hook useEffect para gestionar los ciclos de vida del componente\r\n  useEffect(() => {\r\n    console.log('I am rendering');\r\n    // las 3 siguientes líneas se ejecutan al montar y renderizar el componente\r\n    let intervalId = setInterval(() => {\r\n      setCounter(counter + 1);\r\n    }, 1000);\r\n    // la función retornada a continuación se ejecuta al desmontar y renderizar el componente\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  });\r\n  return <div>Counter: {counter}</div>;\r\n};\r\n\r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}